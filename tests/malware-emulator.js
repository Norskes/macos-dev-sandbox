const fs = require("fs").promises;
const path = require("path");
const os = require("os");

const HOME = os.homedir();
const SANDBOX_DIR = process.env.SANDBOX_BASE_DIR || path.join(HOME, "Sandbox");

// Цветной вывод
const colors = {
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  reset: "\x1b[0m",
};

// Вспомогательные функции
const log = {
  info: (msg) => console.log(`${colors.blue}ℹ️  ${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}✅ ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}⚠️  ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}❌ ${msg}${colors.reset}`),
  file: (path) => console.log(`\n📄 Trying to read: ${path}`),
};

// Список файлов для проверки
const TEST_CASES = {
  // Критичные файлы (должны быть заблокированы)
  blocked: [
    // SSH
    "~/.ssh/config",
    "~/.ssh/id_rsa",
    // Браузер
    "~/Library/Application Support/Google/Chrome/Default/Cookies",
    "~/Library/Application Support/Google/Chrome/Default/History",
    "~/Library/Application Support/Firefox/Profiles/*/cookies.sqlite",
    "~/Library/Application Support/Firefox/Profiles/*/places.sqlite",
    // Документы
    "~/Documents/passwords.txt",
    "~/Documents/private",
    // Системные файлы
    "/etc/passwd",
    "/etc/shadow",
    // Облачные сервисы
    "~/.aws/credentials",
    "~/.aws/config",
    "~/.config/gcloud/credentials",
    "~/.config/gcloud/legacy_credentials",
    // Конфиги и ключи
    "~/.config/some_app/secrets",
    "~/.npmrc",
    "~/.gitconfig",
    "~/.docker/config.json",
    "~/.kube/config",
    // Загрузки
    "~/Downloads/secret.pdf",
    // Keychain и сертификаты
    "~/Library/Keychains/*",
    "~/Library/Application Support/com.apple.TCC/TCC.db",
    // Дополнительные критичные директории
    "~/Pictures",
    "~/Movies",
    "~/Music",
    "~/Desktop",
  ],

  // Разрешенные файлы (должны быть доступны)
  allowed: [
    // Песочница
    "$SANDBOX/test.txt",
    "$SANDBOX/project/src/index.js",
    "$SANDBOX/.git/config",
    "$SANDBOX/node_modules/package.json",
    // Кеш
    "~/Library/Caches/test.cache",
    "~/Library/Caches/npm/package.json",
    "~/Library/Caches/yarn",
    "~/Library/Caches/pip",
    // Логи
    "~/Library/Logs/test.log",
    "~/Library/Logs/sandbox.log",
    // Временные файлы
    "/private/tmp/test.tmp",
    "/private/var/folders/test.tmp",
    "/private/var/folders/*/T/*",
    // Пакетные менеджеры
    "~/.npm/test-package",
    "~/.yarn/cache/test",
    "~/.pnpm-store/test",
    "~/.cache/test",
    // Дополнительные разрешенные пути
    "$SANDBOX/tests/*",
    "$SANDBOX/build/*",
    "$SANDBOX/dist/*",
  ],

  // Системные файлы только для чтения (должны быть доступны только для чтения)
  readonly: [
    // Node.js и системные библиотеки
    "/usr/local/bin/node",
    "/usr/lib/system/libsystem_kernel.dylib",
    "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation",
    // OpenSSL и сертификаты
    "/System/Library/OpenSSL/openssl.cnf",
    "/etc/ssl/openssl.cnf",
    "/System/Library/Security/Certificates.bundle",
    // Сетевые конфиги
    "/etc/hosts",
    "/etc/resolv.conf",
    "/private/etc/hosts",
    // Системные утилиты
    "/usr/bin/*",
    "/bin/*",
    "/usr/sbin/*",
    "/sbin/*",
    // Системные фреймворки
    "/System/Library/Frameworks/*",
    "/System/Library/PrivateFrameworks/*",
    // Системные расширения
    "/System/Library/Extensions/*",
    "/Library/Extensions/*",
  ],
};

// Файлы, которые системно заблокированы macOS sandbox независимо от профиля
const SYSTEM_BLOCKED_FILES = ["/etc/ssl/openssl.cnf", "/etc/resolv.conf"];

// Заменяем переменные в путях
function resolvePath(filepath) {
  return filepath.replace("~", HOME).replace("$SANDBOX", SANDBOX_DIR);
}

// Проверка доступа к файлу
async function testFileAccess(filepath, mode = "read") {
  const resolvedPath = resolvePath(filepath);
  try {
    if (mode === "read") {
      await fs.access(resolvedPath, fs.constants.R_OK);
      // Пробуем прочитать файл
      await fs.readFile(resolvedPath).catch(() => {});
    } else if (mode === "write") {
      // Пробуем создать временный файл
      const tempFile = resolvedPath + ".tmp";
      await fs.writeFile(tempFile, "test");
      await fs.unlink(tempFile);
    }
    return { success: true };
  } catch (error) {
    return {
      success: false,
      error: error.code === "ENOENT" ? "ENOENT" : "EPERM",
    };
  }
}

// Запуск тестов
async function runTests() {
  log.info("Starting sandbox security tests...\n");

  // Тест заблокированных файлов
  log.info("Testing blocked files (should be blocked)...");
  for (const file of TEST_CASES.blocked) {
    log.file(file);
    const result = await testFileAccess(file);
    if (!result.success) {
      log.success(
        `BLOCKED: ${
          result.error === "ENOENT"
            ? "ENOENT: no such file or directory"
            : "EPERM: operation not permitted"
        }, access '${resolvePath(file)}'`
      );
    } else {
      log.warning(`SUCCESS: File could be read!`);
    }
  }

  // Тест разрешенных файлов
  log.info("\nTesting allowed files (should be accessible)...");
  for (const file of TEST_CASES.allowed) {
    log.file(file);
    // Создаем родительскую директорию если нужно
    const dir = path.dirname(resolvePath(file));
    await fs.mkdir(dir, { recursive: true }).catch(() => {});

    // Проверяем запись (главный индикатор доступа)
    const writeResult = await testFileAccess(file, "write");

    if (writeResult.success) {
      log.success(
        "ACCESS GRANTED: Write permission confirmed (file access allowed)"
      );
    } else {
      log.error(
        "ACCESS DENIED: Write operation failed - no access to directory"
      );
    }
  }

  // Тест файлов только для чтения
  log.info(
    "\nTesting read-only files (should be readable but not writable)..."
  );
  for (const file of TEST_CASES.readonly) {
    log.file(file);
    const readResult = await testFileAccess(file, "read");
    const writeResult = await testFileAccess(file, "write");
    const resolvedPath = resolvePath(file);

    if (readResult.success && !writeResult.success) {
      log.success("CORRECT: Read-only access confirmed");
    } else if (readResult.success && writeResult.success) {
      log.warning("WARNING: File is writable when it should be read-only");
    } else if (!readResult.success && readResult.error === "ENOENT") {
      log.success("CORRECT: File does not exist (normal for system files)");
    } else if (
      !readResult.success &&
      readResult.error === "EPERM" &&
      SYSTEM_BLOCKED_FILES.includes(resolvedPath)
    ) {
      log.success(
        "CORRECT: File is system-blocked by macOS sandbox (expected)"
      );
    } else {
      log.error("ERROR: File access blocked when it should be readable");
    }
  }
}

// Запускаем тесты
runTests().catch((error) => {
  log.error("Test execution failed:");
  console.error(error);
  process.exit(1);
});
